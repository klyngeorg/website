---
import type { WithContext, Thing } from "schema-dts";
import "@fontsource-variable/outfit";
import { jsonLd } from "../json-ld";
import Header from "./header.astro";

export type Props = {
  /**
   * The title of the page. The ideal length is approximately 60 characters.
   * When exceeding this limit, search engines will truncate the title.
   *
   * @default Klynge Næringsforening
   */
  title?: string;

  /**
   * The description of the page. The ideal length is between 70 and 155 characters.
   * Minimum length is 70 characters. When exceeding this limit, search engines will
   * truncate the description.
   *
   * @default Default description
   */
  description?: string;

  /**
   * The headline on the page. The ideal length is approximately 47 characters.
   *
   * @default title
   */
  headline?: string;

  /**
   * The heading on the page next to headline. Should be longer than headline.
   *
   * @default title
   */
  heading?: string;

  /**
   * The title for social media platforms. The ideal length is approximately 47 characters.
   * When exceeding this limit, platforms will truncate the title. LinkedIn will truncate
   * the title at 119 characters.
   *
   * @default Uses the title prop
   */
  socialMediaTitle?: string;

  /**
   * The description for social media platforms. Should not exceed 85 characters to fit most platforms.
   *
   * @default Uses the description prop
   */
  socialMediaDescription?: string;

  /**
   * Images for social media platforms. The ideal size is 1200 x 630 pixels.
   * When providing more than one image, the first image will be used, but some
   * platforms will allow the user to choose which image to use.
   *
   * @default ['/images/social-media-image.png']
   */
  images?: string[];

  /**
   * The type of the page.
   *
   * @default website
   */
  type?: "website" | "article";

  /**
   * The path of the page. Used to generate the canonical URL.
   */
  path?: string;

  /**
   * The date the page was published. Only used with type = 'article'.
   */
  articlePublishDate?: Date;

  /**
   * The date the page was last modified. Only used with type = 'article'.
   */
  articleAuthor?: string;

  /**
   * Set to false for pages that shouldn't have a contact form at the bottom.
   */
  contactFooter?: boolean;

  /**
   * JSON-LD structured data for the page.
   */
  schema?: WithContext<Thing> | WithContext<Thing>[];
};

const defaultDescription = `
  Nettverksforening for bedrifter og gründere i Oslo, fokusert på erfaringsdeling,
  innovasjon og samarbeid.
`;

const defaultTitle = "Klynge Næringsforening";

const defaultImage = new URL("/images/social-media-image.png", Astro.site);

const {
  title = defaultTitle,
  description = defaultDescription,
  socialMediaTitle = title ?? defaultTitle,
  socialMediaDescription = description ?? defaultDescription,
  images = [defaultImage.toString()],
  type = "website",
  path,
  schema,
  articleAuthor,
  articlePublishDate,
  contactFooter = true,
} = Astro.props;

const [image] = images;
const makeUrl = (newPath: string) => new URL(newPath, Astro.site).toString();
const canonical = new URL(path, Astro.site);
---

<html lang="nb">
  <head>
    <meta charset="utf-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={makeUrl("assets/favicon.svg")}
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href={makeUrl("assets/favicon-16x16.png")}
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href={makeUrl("assets/favicon-32x32.png")}
    />
    <link rel="shortcut icon" href={makeUrl("assets/favicon.ico")} />
    <link
      rel="mask-icon"
      href={makeUrl("assets/mask-icon.svg")}
      color="#FFFFFF"
    />
    <meta name="viewport" content="width=device-width" />

    <title>{title}</title>
    <meta name="robots" content="index,follow" />
    <meta name="description" content={description} />
    {canonical && <link rel="canonical" href={canonical} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={socialMediaTitle} />
    <meta name="twitter:description" content={socialMediaDescription} />
    <meta name="twitter:image" content={image} />

    <meta property="og:url" content={canonical} />
    <meta property="og:type" content={type} />
    <meta property="og:title" content={socialMediaTitle} />
    <meta property="og:description" content={socialMediaDescription} />
    {images.map((img) => <meta property="og:image" content={img} />)}
    <meta property="og:site_name" content="Klynge Næringsforening" />
    <script
      data-goatcounter="https://klynge.goatcounter.com/count"
      async
      src="//gc.zgo.at/count.js"></script>

    {
      type == "article" && articleAuthor && (
        <meta property="article:author" content={articleAuthor} />
      )
    }
    {
      type == "article" && articlePublishDate && (
        <>
          <meta
            name="publish_date"
            property="og:publish_date"
            content={articlePublishDate.toISOString()}
          />
          <meta
            property="article:published_time"
            content={articlePublishDate.toISOString()}
          />
        </>
      )
    }

    {schema && <script type="application/ld+json" set:html={jsonLd(schema)} />}
  </head>
  <body>
    <Header />
    <slot />
    <style is:global>
      :root {
        --container-width: 1240px;
        --color-primary-base: 175 33%;
        --color-secondary-base: 322 39%;

        --color-bg: hsl(177 37% 16%);
        --color-text: hsl(177 33% 90%);
        --color-focus-bg: hsl(177 33% 85%);
        --color-focus-text: hsl(177 33% 16%);

        body,
        html {
          margin: 0;
          padding: 0;
          min-height: 100vh;
          line-height: 1.5;

          font-size: clamp(1rem, 0.34vw + 0.91rem, 1.19rem);
          font-smooth: always;
          -moz-osx-font-smoothing: grayscale;
          -webkit-font-smoothing: antialiased;

          background-color: var(--color-bg);
          overflow-y: scroll;
          -webkit-text-size-adjust: 100%;
          touch-action: manipulation;
          caret-color: hsl(var(--color-primary-base) 40%);
          font-family:
            "Outfit Variable",
            system-ui,
            -apple-system,
            BlinkMacSystemFont,
            "Segoe UI",
            Roboto,
            "Helvetica Neue",
            Arial,
            sans-serif;
          color: hsl(var(--color-primary-base) 90%);
        }

        *,
        ::before,
        ::after {
          box-sizing: border-box;
        }

        ::selection {
          background: hsl(var(--color-primary-base) 80%);
          color: #1d1d1d;
        }

        /* Remove default margin in favour of better control in authored CSS */
        body,
        h1,
        h2,
        h3,
        h4,
        p,
        figure,
        blockquote,
        dl,
        dd {
          margin-block-end: 0;
        }

        /* Set shorter line heights on headings and interactive elements */
        h1,
        h2,
        h3,
        h4,
        button,
        input,
        label {
          line-height: 1.1;
        }

        /* Balance text wrapping on headings */
        h1,
        h2,
        h3,
        h4 {
          text-wrap: balance;
        }

        /* Make images easier to work with */
        img,
        picture {
          max-width: 100%;
          display: block;
        }

        /* Inherit fonts for inputs and buttons */
        input,
        button,
        textarea,
        select {
          font-family: inherit;
          font-size: inherit;
        }

        /* Make sure textareas without a rows attribute are not tiny */
        textarea:not([rows]) {
          min-height: 10em;
        }

        /* Anything that has been anchored to should have extra scroll margin */
        :target {
          scroll-margin-block: 5ex;
        }

        body *::-webkit-scrollbar {
          background-color: hsl(var(--color-primary-base) 90%);
        }

        body *::-webkit-scrollbar-thumb {
          border-radius: 10px;
          background-color: hsl(var(--color-primary-base) 90%);
          border: 3px solid hsl(var(--color-primary-base) 90%);
        }

        body *::-webkit-scrollbar-thumb:hover {
          background-color: hsl(var(--color-primary-base) 90%);
        }

        p {
          margin-inline-end: 1em;
        }

        a:not([class]) {
          --link-color: hsl(var(--color-primary-base) 90%);

          color: var(--link-color);
        }

        @media (hover) {
          a:hover {
            --link-color: hsl(var(--color-primary-base) 100%);
          }
        }

        a:focus-visible {
          outline-color: var(--link-color);
          outline-offset: 0.4em;
          border-radius: 0.225em;
        }

        .sr-only {
          position: absolute;
          width: 1px;
          height: 1px;
          padding: 0;
          margin: -1px;
          overflow: hidden;
          clip: rect(0, 0, 0, 0);
          white-space: nowrap;
          border-width: 0;
        }
      }
    </style>
  </body>
</html>
